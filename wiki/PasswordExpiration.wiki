#summary Sometimes it is required to force a user to change his password upon login.

= Configuration =

== Authentication Configuration ==

The Password expiration is implemented as a wrapper around the actual authentication handler.

To use it modify `deployerConfigContext.xml` and adjust the property `authenticationHandlers` of the bean `authenticationManager` to use the authentication handler: `com.gentics.labs.sso.cas.server.PasswordExpiryAwareAuthenticationHandler`.

=== Properties ===

The `PasswordExpiryAwareAuthenticationHandler` has the following properties:

  * wrappedAuthenticationHandler: contains a authentication handler which will be used to handle the actual authentication.
  * sql: an SQL statement which should return != 0 if the password has expired.
  * dataSource: a datasource on which to execute the above statement.

== Example == 

{{{
		<property name="authenticationHandlers">
			<list>
				<bean class="com.gentics.labs.sso.cas.server.PasswordExpiryAwareAuthenticationHandler">
					<property name="wrappedAuthenticationHandler">
						<bean
							class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
							<property name="sql" 
								value="select ca2.value_text from contentattribute ca1 inner join contentattribute ca2 on ca2.contentid = ca1.contentid and ca2.name = 'pwd' where ca1.contentid like '50000.%' and ca1.name = 'login' and ca1.value_text = ?;" />
							<property name="passwordEncoder"
								ref="passwordEncoder" />
							<property name="dataSource" ref="dataSource" />
						</bean>
					</property>
					<!-- SQL should check if the update timestamp for the password is older than 30 days. if so, return != 0 -->
					<property name="sql"
						value="select IF(unix_timestamp() - unix_timestamp(ca2.value_date) &gt; 30 * 24 * 3600, 1, 0) from contentattribute ca1 inner join contentattribute ca2 on ca2.contentid = ca1.contentid and ca2.name = 'passwordChangeDate' where ca1.contentid like '50000.%' and ca1.name = 'login' and ca1.value_text = ?;" />
					<property name="dataSource" ref="dataSource" />
				</bean>
			</list>
		</property>

}}}


== CredentialValidator ==

In addition to configuring the authentication handler, the CredentialValidator has to be configured on what to do when the password is detected to be expired.

To do this, configure a `passwordExpiredHandler` which extends `com.gentics.labs.sso.cas.server.web.PasswordExpiredHandler` - see inline documentation for more information: http://code.google.com/p/gentics-sso-cas/source/browse/trunk/cas-server/src/com/gentics/labs/sso/cas/server/web/PasswordExpiredHandler.java

=== PasswordExpiredHandlerImpl ===

A simple implementation is provided in the form of `com.gentics.labs.sso.cas.server.web.PasswordExpiredHandlerImpl`

See the class documentation for more details: http://code.google.com/p/gentics-sso-cas/source/browse/trunk/cas-server/src/com/gentics/labs/sso/cas/server/web/PasswordExpiredHandlerImpl.java

==== Example ====

{{{
	<bean id="passwordExpiredHandler" class="com.gentics.labs.sso.cas.server.web.PasswordExpiredHandlerImpl"
		p:tokenFetchUrl="http://localhost:42880/Portal.Node/portal?GENTICS_FETCHPWTOKEN=1&amp;secret=verySecret&amp;username="
		p:changePasswordUrl="http://localhost:42880/Portal.Node/portal?gentics.pa=portalpage&amp;gentics.rm=PasswordChangePortlet&amp;p.page=pwchange&amp;p.token=" />
}}}
